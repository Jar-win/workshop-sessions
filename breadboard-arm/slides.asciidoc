= Breadboard, ARMed and Dangerous

== Introduction

=== The Spectrum

image:spectrum.png[]

[cols="20%,20%,30%,30%"]
|======
|		| Bare Metal	| RTOS					| GPOS
| Example	| AC, Fridge	| Weather Station, Satellite, Robots, Drones	| Mobile Phone, Gaming Consoles
| Tasks	 	| ~1		| Few, RTOS does scheduling		| Many, GPOS does scheduling
| Tasks Trusted | Yes		| Yes		 			| No, GPOS restricts Tasks / Apps
|======

=== ARM

  * ARM
    - ARM7TDMI, Cortex-M: Bare Metal and RTOS
    - ARM9, Cortex-A: GPOS

  * ARM vs 8051
    - 32-bit Processor
    - Deisgned for high level programming
    - Designed for Multi-tasking
    - Wide OS, compiler, tools support

=== Learning Embedded Systems

  * Embedded developers need good understanding of both hardware and
    software to be effective

  * Easy to learn software, at home, due to widespread availablity of
    desktop computers

  * How do you learn hardware? Obstacles:
    - Expensive
    - Need to shop
    - Lack of learning resources
    - Not hobbyist friendly

=== Learning Hardware Today

  * You still need to spend money, but widely used components are
    cheaper

  * Hardware components can be ordered online
    - element14.com, mouser.com

  * Lots of resources are now available on internet
    - sparkfun.com, adafruit.com

  * Hobbyist friendly
    - Breakout boards, for use with breadboards
    - DIP package ICs
    - Simpler programming mechanisms

[role="two-column"]
=== Lego Blocks

[role="left"]
image::lego.jpg[width="70%",align="center"]

[role="right"]
  * Hardware might sometimes sound complex

  * Hobbyist friendly components are now more like Lego blocks

  * Construction of a house doesn't sound hard when you think Lego
    blocks

[role="two-column"]
=== LPC1114

[role="left"]
image::lpc1114.jpg[align="center",width="50%"]

[role="right"]
  * LPC1114 - ARM chip available in DIP package
  
  * Full power of an ARM processor and peripherals available on a
    breadboard

  * 50 MIPS

  * Peripherals
    - 32KB Flash, 8KB RAM
    - GPIO
    - I2C, SPI, Serial
    - PWM, Timers

[role="two-column"]
=== LPC1114 Block

[role="left"]
image::lpc1114-block.png[align="center",width="40%"]

[role="right"]
  * LPC1114 - ARM chip available in DIP package
  
  * Full power of an ARM processor and peripherals available on a
    breadboard

  * 50 MIPS

  * Peripherals
    - 32KB Flash, 8KB RAM
    - GPIO
    - I2C, SPI, Serial
    - PWM, Timers

=== Goals

  * Goal 1: LED + Serial
    - Toggles a digital pin, every second
    - Transmits a message on the serial port
    - Connect an LED to the digital pin and observe state change
    - Connect serial port to a PC and receive the data
    
  * Goal 2: Reprogram the ARM micro
    - Download a new pre-built binary to the microcontroller

  * Goal 3: Custom Application Development
    - Write a custom program in C
    - Compile the program, and download the binary

== Goal 1: LED + Serial

=== Power Up

  * The microcontroller should be powered up first.

  * What are the various sources of power, for electronic devices?

=== Power Sources

  * Two major sources of power for electronic devices:
    - Battery
    - Wall Power

  * Each electronic device operates at a specific voltage.

  * What is the voltage requirement for LPC1114?

=== Battery

  * Commonly available battery is AA battery.

  * What is the voltage provided by the battery?

  * How can we get the voltage required to operate the LPC1114.
+
image::battery-block.png[align="center",width="10%"]

[role="two-column"]
=== Power Up with Battery

[role="left"]
image::v1.png[align="center"]

[role="right"]
  * Connect the power and ground, to the battery.

  * Verify that the pin `0_7` is toggling using a multimeter.

[role="two-column"]
=== Connecting an LED

[role="left"]
image::v2.png[align="center"]

[role="right"]
  * Connect a Red LED with a 100 ohm current limiting resistor.

  * Does the LED toggle?


[role="two-column"]
=== Characteristics of Power Sources

[role="left"]
image::socket.jpg[width="100%"]

[role="right"]

  * Two 3 pin sockets:
    - Bigger socket at the top
    - Smaller one at the bottom

  * Apart from the size, what's the difference?

[role="two-column"]
=== Water Sources

  * Same as the difference between a fire hose and water tap
  * The amount of water that can be delivered
  * In a power socket, the current that can be delivered

[role="left"]
image::water-tap.jpg[align="center"]

[role="right"]
image::fire-hose.jpg[align="center"]

[role="tip"]
=== //

Caution: Drawing too much current than the power source can deliver, will burn
the power source!

=== Current Draw

  * How much current can be drawn from the IO pins?

  * The red LED has a forward voltage of 1.8V

  * What is the current draw in our circuit?

  * IO pins are designed for signalling rather than for providing
    power

=== Battery Capacity

  * How long will the microcontroller run before the battery drains
    out? This depends on two things.

    - How much charge is stored in the battery?

    - What is the total current draw of the circuit?

=== Battery vs Wall Power

  * Battery is generally used for mobile devices / remote devices

  * Device should have low power consumption for longer life

  * Rechargable batteries should be used to ensure continuous
    operation

  * Wall power is generally used for stationary devices

[role="two-column"]
=== Wall Power

[role="left"]
image::ac-adapter.jpg[align="center"]

[role="right"]
  * One common AC adapter is the mobile phone charger.

  * Mobile phone chargers provide a 5V DC.
  
  * A 3.3V DC is required to operate the circuit
+
image:usb-block.png[width="20%"]
image:usb-breakout.jpg[width="50%"]


[role="two-column"]
=== Quiz

[role="left"]
image::stabilizer.jpg[align="center"]

[role="right"]
  * Do you recognize the device?
  
  * Where is it used?

  * What is its purpose?

[role="two-column"]
=== Voltage Regulator

[role="left"]
image::regulator.jpg[align="center"]

[role="right"]
  * A voltage regulator serves the same purpose for an electronic circuit

  * A 3.3 voltage regulator can takes a 5V input and provides a clean 3.3V
    output

  * Available for various fixed output voltages. We use LD1117V33
+
image::regulator-block.png[width="20%",align="center"]

=== From Battery Powered

image::v2.png[align="center",width="50%"]

=== To Wall Powered

image::v3.png[align="center",width="50%"]

[role="two-column"]
=== Serial Comm.

[role="left"]
image::ftdi-breakout.jpg[align="center"]

[role="right"]
  * PC / Laptops generally today do not have a serial port

  * USB serial ports are available

  * Connect to PC USB port, visible a COM port in Windows
+
image::ftdi-simple-block.png[width="30%",align="center"]

=== Serial Comm.

image::v4.png[align="center",width="50%"]

[role="tip"]
=== //

Goal 1: LED + Serial is Complete!

== Goal 2: Reprogram the ARM micro

[role="two-column"]
=== Programming Micros

[role="left"]
image::programmer.jpg[align="center"]

[role="right"]
  * Microcontroller used to have special programmers

  * Required to remove from the circuit for programming

  * Code is downloaded from the PC into micro, using the programmer

  * Modern microcontrollers have In-System Programming (ISP) support

=== How ISP Works

  * The micro has an internal boot ROM

  * When the ARM core is reset, the PC points to boot ROM

  * It starts executing instructions from boot ROM

  * The boot ROM has a boot loader

  * Bootloader reads the state of pin `0_1` (in LPC1114)

    - If high, executes code from Flash
    - If low, goes into ISP mode
    
  * In ISP mode receives code through serial port and stores in Flash

=== Automated ISP Entry

  * Serial comm. circuit can be used to perform ISP

  * Need to set `0_1` low, and reset the micro to enter ISP

  * Can be simplified by connecting `RST` and `0_1` of micro to `DTR`
    and `RTS` of FTDI

  * `DTR` and `RTS` are extra signals available for MODEM handshake

  * They can be controlled through host software

  * The code download software
    - Sets `RTS` low, to make `0_1` low (ISP enable)
    - Toggle `DTR`, to reset micro
    - Downloads the code

=== Before Auto ISP

image::v4.png[align="center",width="50%"]

=== After Auto ISP

image::v5.png[align="center",width="50%"]

=== ISP Command

  * `lpc21isp` program can download code to the microcontroller.
  
  * Invoke as shown below
+
--------
$ lpc21isp -bin -control test.bin /dev/ttyUSB0 115200 12000
--------
+
  * `-bin` indicates the format of the executable

  * `-control` indicates that `lpc21isp` is to use `DTR` and `RTS` to
    enter into ISP mode.

  * `test.bin` is the image to be flashed

  * `/dev/ttyUSB0` is the serial device file name

  * `115200` is the baudrate for the serial download

  * `12000` specifies the clock in kHz

[role="tip"]
=== //

Goal 2: LED + Serial is Complete!

== Goal 3: Custom App

=== mbed

image::mbed.png[align="center"]

  * Components
    - IDE for embedded software development
    - RTOS / Library for Firmware Development

  * Distributed under an open source license

=== mbed IDE

  * Goto https://developer.mbed.org/account/login/
  * Create an account and login
  * Goto Compiler, and click New
  * Select Platform "mbed LPC1114FN28"
  * Select Template "Blinky LED Hello World"

[role="two-column"]
=== mbed Library

[role="left"]
[source,cpp]
------
#include "mbed.h"

DigitalOut myled(P0_7);

int main() {
    while(1) {
        myled.write(1);
        wait(1);
        myled.write(0);
        wait(1);
    }
}
------

[role="right"]
  * Written in C++
  * `DigitalOut` class is used for controlling an output pin
  * myled instance is created for pin `P0_7`.
  * `myled.write(1)` sets the pin to `1`.
  * `myled.write(0)` sets the pin to `0`.
  * `wait` API causes the microcontroller to pause for the specified
    no. of seconds

=== mbed

  * Modify it so that the LED blinks every 5 seconds.
  * Click Compile
  * Download the generated bin file
  * Flash the bin file using LPC21ISP

== Acknowledgements

=== Photo Credits

  * Stabilizer Photo:
    http://www.flipkart.com/v-guard-vgd-30-voltage-stabilizer/p/itmdp955dr9r4sdk
  
  * Samsung Charger Photo:
    http://www.flipkart.com/smartpro-travel-charger-samsung-all-other-mobile-phones-battery/p/itme37k7jz7n5xau

  * LD1117V33 Photo:
    https://www.sparkfun.com/products/526

  * FTDI Breakout Photo:
    http://www.rhydolabz.com/index.php?main_page=product_info&products_id=1090

  * 8051 Programmer Photo:
    http://findparts.in/view/8051+programmer/o5/i14176

  * LPC1114 Photo:
    https://developer.mbed.org/users/okano/notebook/pinout-picture/

  * Lego Bricks Photo:
    https://commons.wikimedia.org/wiki/File:Lego_Color_Bricks.jpg