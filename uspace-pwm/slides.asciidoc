= Linux Userspace PWM Access

== Pulse Width Modulation 

=== Overview

* The modulation is the way of mixing the useful data signals along with
  carrier medium which can be physically transmitted.

* The PWM is the way in which the width of the carrier waveform is
  varied, based on the information signal.

* The hardware which can be configured to generate PWM signals is
  called as PWM controller. The width of the signal generated by
  controller can be configured through software.

* Using PWM signal it is possible to generate analog variations with
  digital signals.

* The PWM signal can be used to control the power delivered to a load,
  by controlling the on-time of the PWM signal.

[role="two-column"]
=== PWM in Detail

[role="left"]
* Period is the cycle time of the PWM signal which involves both on
  and off time.

* The `duty cycle` is defined as the ratio of on-time of the signal to
  the period of the signal.

* duty-cycle = (ON Time / Period) * 100


[role="right"]
.PWM signals with various pulse widths
image::figures/pwm-signal.png["PWM signals with various pulse widths",width=288]

=== PWM Applications

* PWM signals are used to dynamically control the power generated from
  a source.

* PWM signals are generally used for motor speed control, LED
  brightness control, power supplies and wave form generation.

=== PWM Grouping

* Set of PWM signals are grouped into a single controller

* Each PWM signal in a PWM controller is called a PWM channel.
 
=== ZKit PWM Mappings

[options="header"]
|==================
| PWM Seq No| Sub Channel|Device   
| PWM16     | 0  |Backlight     
| PWM17     | 1  |DC Motor
| PWM18     | 2  |Buzzer 
|==================

[role="two-column"]
=== PWM in Linux

[role="left"]
* In Linux the PWM interfaces can be accessed from userspace
  application through sysfs.

* The access to sysfs goes to generic PWM driver, which inturn calls
  the processor specific GPIO driver.

[role="right"]
image::figures/layer.png[width=350]

== Sysfs PWM

[role="two-column"]
=== Using PWMs with the sysfs interface

[role="left"]
* Inside `sysfs` in path '/sys/class/pwm` we have files which allows
  to control PWM channels.x

* For each PWM controller a folder '/sys/class/pwm/pwmchip<base>' is
  created where `base` is the base channel number for that controller.

* For each channel in a PWM Chip we would find a directory
  "/sys/class/pwm/pwmchip<base>/pwm<chno>".

* Inside the channel directory we have files `period`, 'duty_cycle` &
  `enable`.


[role="right"]
----

/sys/class/pwm/
| -- pwmchip<base>
     | -- pwm<no>
       	  | -- period
          | -- duty_cycle
          ` -- enable

----


== Peizo Buzzer

=== Buzzer Overview 

* It works on the inverse principle of peizo electric effect ie,
  electrical energy is converted into mechanical energy.

* When an oscillating digital signal is provided the buzzer stretch or
  compress, producing sound.

* The tone of the sound can be modified by frequency of the signal.

* PWM can be interfaced to Buzzer to create varied tonea.

[role="two-column"]
=== Buzzer Circuitary

image::figures/buzzer.png[width=400, align="center"]

[role="two-column"]
== PWM Access

=== PWM Channel Request

* The processor pins can be mapped for PWM channels through sysfs

----
$ echo 2 > /sys/class/pwm/pwmchip16/export
----

* You would find `/sys/class/pwm/pwmchip16/pwm2` available.

* PWM channel can be freed as shown below

----
$ echo 2 > /sys/class/pwm/pwmchip16/unexport
----

=== PWM Signal Control

* The period of the PWM can be controller as

----
$ echo 1000000 > /sys/class/pwm/pwmchip16/pwm2/period
----

* The dutycyle can be updated as 

----
$ echo 500000 > /sys/class/pwm/pwmchip16/pwm2/duty_cycle
----

* The PWM channel can be enabled / disabled as 

----
$ echo 1 > /sys/class/pwm/pwmchip16/pwm2/enable
----

=== Programming for Buzzer

Following code will control the tone of buzzer.

[source, python]
------
include::code/buzzer.py[]
------

=== PWM Class

[source, python]
------
include::code/pwm.py[]
------

=== Playing Tone

[source, python]
------
include::code/tone.py[]
------

== DC Motor

=== Overview

[role="left"]
* The speed of the DC Motor is proportional to the supply voltage
  provided to it.

* Speed control can be acheived by varying the average voltage
  delivered to the motor.

* The motor is rapidly switched on and off, where by controlling the
  on-time it is possible to control the speed of the motor.

* To control the speed of the DC-motors the voltage to the DC-motor
  has to be modulated through PWM signals.

* DC motor's speed and direction of rotation can be controlled varying
  the voltage levels and polarity.

=== Voltage Variation

.Voltage variation with duty cycle
image::figures/avg-duty.png["Voltage variation with duty cycle",width=388, align="center"]


=== Programming Motor

[source, python]
------
include::code/dcmotor.py[]
------