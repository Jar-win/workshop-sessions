= Adding Display Support

== LCD Display

=== Linux Display Framework 

  * In Linux, the LCD/TFT display are handled by the framebuffer
    subsystem of the kernel.

  * Kernel provides the framebuffer core, to which the SoC's LCD
    controller driver would get registered to.

  * All the user space applications would access the display using the
    frame buffer driver APIs.

=== Linux Display Framework

image::figures/fblayers.png[align="center",width=600]

=== Frame Buffer Features

  * The frame buffer driver allows to configure the display resolution
    from the userspace.

  * It provides APIs to write a frames into the frame buffer which
    would get updated to the LCD controller.

  * Supports text console over the graphics display, using fbconsole
    drivers.

[role="two-column"]
=== Display HW Connectivity

[role="left"]
image::figures/lcd-connectivity.png[]

[role="right"]

  * `Pixel Clock` used for synchronous transfer.

  * `Vsync` is used for indicating a start of a new frame.

  * `HSync` is used for indicating a start of a new line.

  * `Data Bus` carries the pixel data.
 
=== Display Parameters of LCD

The parameters affecting the above lines for the LCD we use are

 * Bit per pixel or bus width - `16`

 * Color representation for 16 bit is `RGB565`

 * Horizontal width - 480
  
 * Vertical height - 640 

=== Display Timing Parameters

image::figures/display-timings.png[align="center",width=1024]

=== LTM035A776C TFT Panel Timing Info

|=====================================
| *Horizontal Timing* |          |
|FH		|16.7 to 18.5 |KHz    
|H period   	|496  	      |Pixels	     
|  	   	|54 min.      |Us	     
|H disp area	|480	      |Pixels
|H sync width	|4	      |Pixels
|H back porch	|8	      |Pixels
|H front porch	|4	      |Pixels
|H sync pol	|Neg.	      |
|=====================================

=== LTM035A776C TFT Panel Timing Info (2)

|======================================
|*Vertical Timing* |             |
|FV              |51 to 56     |  KHz    
|V period	 |648	       |H(Line)
|V disp area	 |640	       |H(Line)
|V sync width	 |2	       |H(Line)
|V back porch	 |3	       |H(Line)
|V front porch	 |3	       |H(Line)
|V sync pol	 |Neg.	       |	      
|Pixels CLK	 |4.28 to 4.702| MHz
|=======================================    

=== Frame Buffer Parameters Representation

image::figures/fbdev-timings.png[align="center",width=600]

=== Device Tree Configuration 


  * The device tree representation of the display is bit tricky.

  * LCD Controller is a peripheral controller in the system bus and
    the LCD/TFT display panel is a external device. Both of these has
    to be represented in DTS.

  * The LCD controller driver needs to know the panel's configuration
    parameters, so the controller's dt node should have reference to
    panel's properties and vice versa.

  * This kind of cross reference configurations are represented as
    of-graph.

  * The LCD controller node defines a output port, which has endpoint
    pointing to endpoint of another port, defined in the display panel
    node.

[role="two-column"]
=== DTS Configuration for LCD Controller

[role="left"]
----
lcd@40500000 {
	compatible = "marvell,pxa270-lcdc";
	reg = <0x44000000 0x10000>;
	interrupts = <17>;
	clocks = <&clks CLK_LCD>;			
	status = "okay";

	port {
		lcdc_out: endpoint {
			remote-endpoint = <&panel_in>;
			bus-width = <16>;
		};
	};
};
----

[role="right"]
  * For the display panel we have a node created, which has a input
    port with endpoint, that connects to the remote endpoint of port
    in the LCD controller.

[role="two-column"]
=== Device Tree Representation of Panel


[role="right"]
  * The display panel node has timing information which would be used
    describe about the panel's parameters like polarity of syncs and
    time period of the various signals.

  * The timing informations can be obtained from the datasheet of the
    display panels.

  * With this, The LCD control driver can configure itself, based on the
    timing specification of the display panel.


[role="left"]
----
display@0 {
    display-timings {
	native-mode = <&timing0>;
	timing0: 480x640 {
	    clock-frequency = <20000000>;
	    hactive = <480>;
	    vactive = <640>;
	    hfront-porch = <4>;
	    hback-porch = <8>;
	    hsync-len = <4>;
	    vback-porch = <3>;
	    vfront-porch = <3>;
	    vsync-len = <2>;
	    hsync-active = <1>;
	    vsync-active = <1>;
	};
    };
			
    port {
	panel_in: endpoint {
  	    remote-endpoint = <&lcdc_out>;
	};
    };
};

----

=== Tryout

  

  * To support the LCD in our target, Download
    link:{include:code/display-support.patch.datauri}["display-support.patch",filename="display-support.patch"]
    and apply to the dts.

=== Testing Framebuffer Configuration

* we can see whether the FB driver works just by redirecting the
  contents of urandom to framebuffer nodes. This should fill the
  screen with colored pixels.

----
$ cat /dev/urandom > /dev/fb0
----

=== Testing Framebuffer Configuration (2) 

* We need to check whether the FB driver is configured for right
  resolution. For which we may need create a image for resolution of
  the display.

----
PC$  convert -size 480x640 xc:skyblue -fill white -stroke black \
     -draw "rectangle 10,10 470,630" rect.rgb
PC$ cp rect.rgb ~/tftpboot
----

* Then the created image can be retrieved rendered on FB as

----
$ cd /tmp
$ tftp -g -r rect.rgb 10.0.2.2
$ cat rect.rgb > /dev/fb0
----

=== Testing Frame Buffer Console

* We can check the whether fbconsole is working by writing data to the
  virtual terminal corresponding to the fb0

----
$ echo "Hello World" > /dev/tty0
----

=== References for DTS Bindings

  * The details FB layering is available in
    http://www.embeddedlinux.org.cn/essentiallinuxdevicedrivers/final/ch12lev1sec2.html

  * [1]: Documentation/devicetree/bindings/display/display-timing.txt

  * [2]: Documentation/devicetree/bindings/media/video-interfaces.txt

=== Enabling Frame Buffer Drivers Support

  * In kernel the drivers for FB can be enabled in 

----
Device Drivers --->
       Graphics support --->
  	   Frame Buffer Devices --->
	   	 <*> Support for frame buffer devices
----

  * We may need to enable the SoC specific low level drivers

----
Device Drivers --->
       Graphics support --->
  	   Frame Buffer Devices --->
	   	 <*> PXA LCD framebuffer support
----

=== Enabling Frame Buffer Console Support

  * We can enabled the frame buffer console driver to support printing
    kernel console messages.

----
Device Drivers --->
       Graphics support --->
  	  Console display driver support  --->
	  	 <*> Framebuffer Console support
----
