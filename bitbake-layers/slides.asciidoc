= BitBake with Layers
Zilogic Systems

== Layers

=== Overview

  * Layers are powerful feature of BitBake

  * It allows related meta data to be clumped together

  * Along with BitBake's other features, layers
    can extend / override meta data in other layers

=== Use Case: Recipe Collection

  * Layer provids a way of distributing a collection of recipes

  * Collection of recipes providing a feature, like GTK+ GUI, can be
    distributed as a layer

=== Use Case: BSP Support

  * Layer provies a way of adding support for a particular hardware

  * Recipes and configuration, to enable support for various
    hardware peripherals

=== Use Case: Customization

  * Important since, may layers are distributed by other vendors

  * Hard to convince a vendor to include a change, might not be
    applicable to all users

  * A mechanism is required to modify a layer, without directly
    changing it's source

  * A local custom layer, is used for this purpose

== Using Layers

=== Sandwich with Layers

  * Demonstration of layers is done using simple recipes, just as
    before

  * Lunch -- Sandwich project re-written with layers

=== Layer Directory Structure

image::figures/layer-dir-tree.png[align="center"]

[role="two-column"]
=== Layer Config. Processing

[role="left"]
image::figures/layerconf.png[align="center"]

[role="right"]
  * If `BBPATH` is not set, BitBake looks for `conf/bblayers.conf`, in
    the current directory

  * The file sets up `BBLAYERS` to specify a list of layer directories

  * For each layer in `BBLAYERS`, the `conf/layer.conf` is read

  * `conf/layer.conf` file sets up `BBPATH` and `BBFILES`

  * `bitbake.conf` is searched in `BBPATH`, and read

=== Making Lunch

  * Layer for sandwich is called `meta`

  * Contains the recipe for building sandwich

  * For BitBake layer processing, `BBPATH` should not be set in env.

  * Ensure the variable `BBPATH` is not set, from a previous exercise
+
-------
$ unset BBPATH
-------
+
  * Build and verify sandwich

== Adding New Layers

=== Adding a Burger Layer

  * Create new layer for burger calld `meta-burger`
+
------
cd ~/yp/lunch
mkdir meta-burger
------

=== Adding a Layer Conf

  * Create `conf/layer.conf`
+
------
BBPATH .= ":${LAYERDIR}"

BBFILES += "${LAYERDIR}/*.bb ${LAYERDIR}/*.bbappend"

BBFILE_COLLECTIONS += "burger"
BBFILE_PATTERN_burger := "^${LAYERDIR}/"
------

=== Adding a Burger Recipe

  * Create `meta-burger/burger.bb`
+
------
PN = "burger"

DEPENDS = "omelet"

do_get() {
        echo ${PN}: bun > burger.txt
        echo ${PN}: cheese >> burger.txt
        cat omelet.txt  >> burger.txt
        sleep 1
}

do_cook() {
        echo "${PN}: toast bread and serve" >> burger.txt
        sleep 2
        echo "${PN}: ready" >> burger.txt
}
------

=== Add the Layer

  * Add the layer to `conf/bblayers.conf`
+
------
BBLAYERS = "            \
  ${TOPDIR}/meta        \
  ${TOPDIR}/meta-burger \
"
------

=== Make the Burger

  * Try building burger using the new layer

== Customization using Layers

=== Using Append Files

  * Modify omlete to have less pepper

  * Add a file called `omelet.bbappend` in `meta-burger`
+
------
do_get() {
        echo ${PN}: less pepper > omelet.txt
        echo ${PN}: egg >> omelet.txt
}
------
+
  * Delete `tmp`, and rebuild burger now