= Device Interfacing
Zilogic Systems
:data-uri:

== Microprocessors

=== Model 1

image::figures/model.png[width="60%",align="center"]

=== Model 2

image::figures/model2.png[width="60%",align="center"]

=== Model 3

image::figures/model3.png[width="60%",align="center"]

=== RAM

image::figures/ram.png[width="30%",align="center"]

=== Instruction

image::figures/instruction.png[width="90%",align="center"]

== Memory Interfacing

=== RAM Interfacing

image::figures/single-ram.png[width="70%",align="center"]

=== Two RAM Chips

image::figures/two-ram-nodecode.png[width="40%",align="center"]

=== With Decoding Logic

image::figures/two-ram.png[width="50%",align="center"]

== Device Interfacing

=== Seven Segment Display

image::figures/7-segment.png[width="70%",align="center"]

=== Seven Segment Display

image::figures/7-segment-data.png[width="70%",align="center"]

=== Memory Mapped IO

image::figures/ram-display.png[width="60%",align="center"]

=== Memory Access Optmization

  * CPU is much faster than RAM

  * An operation like ADD, performed within the CPU takes about 0.5 ns

  * A memory access operation, takes about 100 ns

  * Optimization

    - Compiler Level
    - System Level
    - CPU Level

=== Compiler Level Optimization

  * Compiler level
+
------
int a;

a = 2;
...
a = 5;
------
+
  * Can be disastrous while accessing devices

  * Can be disabled using the `volatile` keyword

=== Controller Based IO

image::figures/io-controller.png[width="75%",align="center"]

== ARM Lab

[role="two-column"]
=== Target Board

[role="left"]
image::figures/connex-mmap.png[width="80%",align="center"]

[role="right"]
  * Qemu to emulate the target system

    - Gumstix Connex Board
    - Intel XScale PXA255 Processor
    - 64 MB RAM
    - 16 MB Flash

=== Toolchain

  * Pre-built GNU ARM Toolchain from Code Sourcery

  * Separate toolchain for bare metal programming

  * Cross tool chain prefix: `arm-none-eabi-`

    - `gcc`: `arm-none-eabi-gcc`
    - `ld`: `arm-none-eabi-ld`

=== Try Out

  * Create a 16MB file to represent the Flash
+
------
$ dd if=/dev/zero of=flash.bin bs=4096 count=4096
------
+
  * Download
    link:{include:u-boot.bin.datauri}["u-boot.bin",filename="u-boot.bin"]
    and store it in the top of the Flash
+
------
$ dd if=u-boot.bin of=flash.bin bs=4096 conv=notrunc
------

=== Try Out

  * Start Qemu with the Flash contents
+
------
$ qemu-system-arm -M connex -pflash flash.bin -nographic
------
+
  * When Qemu is started, the ARM processor starts executing code from
    the reset address

  * U-boot has been programmed at the address, U-boot starts executing

  * Serial port of the target is mapped to stdio of Qemu

=== RTC Registers

[options="header",width="75%",align="center"]
|======
| Address	| Name	| Description
| 0x40900000	| RCNR	| RTC Count Register
| 0x40900004	| RTAR	| RTC Alarm Register
| 0x40900008 	| RTSR	| RTC Status Register
| 0x4090000C	| RTTR	| RTC Trim Register
|======

=== Try Out

  * Viewing the RTC count register
+
------
GUM> md 0x40900000 1
------
+
  * Increments every 1 second

=== Conclusion

  * Served to refresh microprocessor and device interfacing
    fundamentals

  * Explored the ARM lab setup

  * Re-infornced the idea of memory mapped IO with RTC example

