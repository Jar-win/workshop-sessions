= Embedded Linux Introduction

== Embedded Systems

=== Embedded Vs Open Systems

* Embedded System - Programmable electronics system immersed in a
  larger physical system, and has fixed functionalities.

* Open System - General purpose system which is interoperable and
  sticks to open standards, whose hardware and software features are
  scaleable and extensible.

* We are in an era of Hybrid embedded systems, where the devices built
  has mixed properties of both embedded system and open system.

* Currently the specific purpose embedded systems are classified as
  deeply embedded systems.

=== Embedded Software Model 

* Mostly in deeply embedded systems monolithic binary image of
  software called as firmware is developed.
 
* In mid level embedded systems the minimilastic multi-threaded OS or
  real-time OS (RTOS) is used along with the application code to build
  the firmware image.

* In above firmware model the software features are freezed at compile
  time itself and it cannot be scaled at later point.

* The high level embedded systems are hybrid and uses general purpose
  operating systems (GPOS).

=== Embedded Software Model Contd.

image::figures/embedded-software-model.png[]

=== High Level Embedded Systems Application

They are used in

  * Telecom

  * Network

  * Consumer electronics

[role="two-column"]
=== General Purpose Operating System

[role="left"]

 * It would be multi-layered with multiple software components
   integrated together.

 * Follows open standards like POSIX

 * Applicatins can be installed or removed at runtime.

 * Applications are untrusted by OS and are provided less priveleges.

 * Linux, BSD, MAC, Windows etc.,

[role="right"]
image::figures/gpos-stack.png[]

== Linux

=== What is Linux

  * Unix-like: provides an interface similar to the Unix operating
    system developed by Bell labs.

  * multi-tasking: many different applications at the same time

  * multi-user: many different users can use the system 

  * cross-platform: supports wide variety of hardware - desktops,
    mainframes, supercomputers, gaming stations, mobile phones,
    routers, etc.

== Linux Usage

[role="two-column"]
=== User Interaction
[role="left"]
  * User can interact to an UNIX system through `shell` or through
    `desktop environment`.

  * A shell is a command line equivalent of the start menu and the
    file browser in M$ Windows. A shell provides a means for
    navigating through the file system, and launching other programs
    on request.

  * So called because it provides an interface through which the
    facilities of an operating system is accessed.

  * Desktop environment is the graphical replacement for shell and
    provides much more convenience for desktop usage.

[role="right"]
image:figures/unix-rings.png[width=388]

=== Files & Folders

  * Files in GNU/Linux can be broadly classified as follows:
+
  1. Regular files
  2. Directories
  3. Links, similar to M$ Windows Shortcuts
  4. Device Files
+
  * In GNU/Linux every device is represented by a file in `/dev`
    directory. For example `/dev/sda` represents the hard disk,
    `/dev/ttyS0` represents the serial port, `/dev/input/mice`
    represents the mouse, ...

  * Reading/writing to and from the device file, results in reading
    from/writing to the device. To get mouse events the following
    command can be used.

=== File System Tree

  * File - important abstraction in Linux.

  * A file system tree, with all the necessary files is required for
    Linux system to boot.

  * Import files present in the file system tree include
    - system programs
    - application programs
    - configuration files
    - device files

=== Windows Layout

  * Every operating has a way of laying out different categories of
    files in the filesystem.

`--------------------`------------------------------------
Category             Folder
----------------------------------------------------------
User's Files         `C:\Documents and Settings`
Application Programs `C:\Program Files`
System Programs      `C:\Windows`
Temporary Files      `C:\Windows\Temp`
System Configuration `C:\Windows\System32\Config`
----------------------------------------------------------

=== Linux Layout
`-----------------------------------------`------------------------
Category					Directory
-------------------------------------------------------------------
User's Files					`/home`
Binaries					`/bin`, `/usr/bin`
System Binaries					`/sbin`, `/usr/sbin`
Kernel, Bootloader				`/boot`
Libraries					`/lib`, `/usr/lib`
Temporary Files					`/tmp`
Configuration Files				`/etc`
Help Files					`/usr/share/doc`
Architecture-independent application files	`/usr/share`
Variable data files				`/var`
Device nodes					`/dev`
Processes and Kernel information		`/proc`
-------------------------------------------------------------------

[role="two-column"]
=== Layout Contd.

[role="left"]
.Windows XP Layout Tree
image::figures/winxp-layout.png["Windows XP Layout Tree",width=288]

[role="right"]
.GNU/Linux Layout Tree
image::figures/linux-layout.png["GNU/Linux Layout Tree"]

===  Need for a File Systems

  * Data corresponding to a file are stored in sectors of the
    harddisk.

image::figures/no-fs.png[width=388, align="center"]
    
  * User has to remember the sectors that store the contents of a file.

  * The user also has to keep track of which sectors are free.

  * Managing files becomes tedious.

  * The filesystem maintains a table, that maps filenames to the
    sectors that contain the contents of the file.

== Embedded Linux

=== Why Embedded Linux?

.Pros

  * No royalties or licensing fee.
  * Support is available from the community, as well from multiple
    vendors. This avoids vendor lock in.
  * Linux kernel supports a wide range of microprocessors and
    peripherals devices.
  * Re-use existing Linux application base.
  * Re-use existing Linux resource pool in embedded systems.

=== Why Embedded Linux Contd.
.Cons

  * Large memory foot print.
  * The stock kernel only offers soft real-time capabilities. Third
    party patches are available for latency reduction and adding hard
    real-time capabilities.

[style="two-column"]
=== Target Hardware Components

[role="left"]

  * Processor
  * Flash
  * SDRAM
  * Serial Port
  * Ethernet

[role="right"]
image::figures/hardware.png[]

[role="two-column"]
=== Development Setup

[role="left"]
  * Host System - development env.

  * Target System - execution env.

  * The application running in the target system read input from the
    serial port, and send output to the serial port.

  * In other words, the standard input and standard output of the
    applications is attached to the serial port.

  * Host system uses a serial terminal program like minicom and
    hyperterminal to communicate with the target system.

  * Kernel image and filesystem image download is done through
    Ethernet interface. Serial interface is not fast enough.

[role="right"]
image::figures/setup.png[]

[role="two-column"]
=== Linux Software Components

[role="left"]
  * Boot Loader
  * Kernel
  * File System
  * C library
  * Shell & Utilities
  * Init & Boot Scripts

[role="right"]
image::figures/boot-timeline.png[width=588]

=== Boot Loader

  * Low-level hardware initialisation, memory controller
       initialisation, cache initialisation
 
  * Provide a mechanism to locate, load and execute kernel present
       in the flash.

  * Provides a mechanism to pass board related information and boot
    arguments to the kernel.

  * Popular embedded boot loaders are
    - U-boot
    - Redboot, uses drivers from eCOS RTOS.

=== Kernel

    1. Create higher level abstractions like files, processes, pipes,
       sockets, etc on top of the hardware.

    2. Manage sharing of system resources - CPU, Memory, Devices.

== File System

=== File System Format

  * Specifies how files are laid out in a storage medium.

  * Each file system format requires a corresponding filesystem driver.

  * Various filesystem drivers are available, and depending on the
    requirement, the appropriate filesystem driver should be used.

    - ext2/ext3 - filesystems commonly used in desktops

    - jffs2 - filesystem tuned for Flash based memory devices
    
=== Rootfs Contents

 * libraries required by applications
 * Shell / Desktop to interact with the systems
 * Initscripts to initialize the system
 * Applications
 
=== Embedded Storage

  * Hard disks are not suitable for embedded systems
    - Contain moving parts
    - Sensitive to physical shock
    - Requires multiple power supply voltages

  * Replaced by non-volatile memory devices - Flash

  * Embedded Linux systems require > 4MB of Flash memory.

== ZKit-ARM-VF51

=== Board Details

* Vybrid VF50 
  - Cortex A5
  - 400 MHz

* 128 MB RAM

* 128 MB NAND

=== Peripheral Details

image::figures/peripheral-blocks.png[align="center"]

