= Unit Testing with Python
Zilogic Systems

== Introduction

=== Why write Test Cases?

  * Python's expressiveness and dynamic nature makes it very
    powerful

  * Some times it just too powerful, and wielding it needs care

  * Can you spot the issue in the following code?

[source,python]
------
class ProtocolX:
    def __init__(self, server, username, password):
        self.server = server
	self.username = username
        self.passwd = password

    def reconnect(self, server):
        self._disconnect()
        self.sevrer = server
        self._connect()
------

=== More Examples

  * Such issues are hard to debug, hours are wasted chasing such bugs

  * Typos can lurk within code paths that are seldom taken

  * Causing programs to crash, when they shouldn't

[source,python]
------
def read_file(filename):
    try:
        fp = open(filename)
	data = fp.read()
    except IOError as exc:
        log.err("error reading '%s': %s" % (filenme, exc))
    finally:
        fp.close()
------

=== Too Powerful!

  * Python lacks the safety net of a compiler and static type checking

  * Remember what Uncle Ben said to Peter Parker?
+
[quote,Uncle Ben]
______
With great *powers*, comes great *responsibility*.
______
+

  * Responsible Python programmers, write automated test cases for their
    code

  * Driving the code through all possible code paths, weeding out
    silly typos and regressions

=== E2E vs Unit Testing

  * People generally tend to test their software as a whole
    - Run the program
    - Input data through the UI
    - Check program's response

  * Tests done this way automated or manual is called End-to-End
    Testing

  * E2E Testing is required but not sufficient

=== Drawbacks of E2E Testing

  * It is terribly *slow*
  
    - Accessing database, networks, files, etc. is slow
    - Implication: Will not be run often
    
  * Running test cases has *dependencies*

    - Depends on the availability of test server, input emulators, etc.
    - Implication: Only people with access to resources can execute it

  * Hard to determine *root cause* of failing test

    - Implication: For a large code base, takes time and effort to zero in on the faulty code

=== Drawback of E2E Testing (Contd.)

  * Cannot drive program through all possible code path, *low code coverage*

    - Some error scenarios is almost impossible to create
    - Implication: Low code coverage, and typos lurking in untested code paths

  * E2E tests can be *flaky*

    - Intermittent network failures, power outages, device failures,
      can cause tests to fail
    
    - Implication: Reduces trust on the tests

=== Unit Testing

  * Unit Tests, verify the public interface of a module / class, in
    isolation

  * Dependencies are *mocked* or *faked*

  * Written and executed by developers

=== Advantages of Unit Testing

  * Unit tests are extremely *fast*
    - They do not use databases, network, file system, other applications, console, etc.

  * Unit tests provide *early feedback*
    - No test setup or resources are required to run the tests
    - Developers can run them every time they make a change and before committing the code

=== Advantages of Unit Testing (Contd.)

  * Unit tests makes it easier to *refactor*
    - Any regression due to refactoring, will be caught by unit tests
    - Code can be refactored / improved without the fear of regression


[role="two-column"]
=== Testing Pyramid

[role="left"]
image::figures/test-pyramid.png[align="center"]

[role="right"]

  * Unit tests verify the *functionality of each unit*

  * Integration tests verify that the *units work together* at the
    sub-system level

  * E2E tests verify that the *product works as a whole*

  * A good test strategy will have, a mix of each approach, with most
    of the testing done at the unit level

[role="tip"]
=== //

Article on Google Testing Blog:
http://googletesting.blogspot.in/2015/04/just-say-no-to-more-end-to-end-tests.html[Just
Say No to More End-to-End Tests]

== Writing Unit Tests

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * A puzzle game, where the player pushes boxes to docks
  * Restrictions
    - Boxes cannot be pulled
    - Boxes cannot be pushed into walls or other boxes

  * Under 400 lines of code, written using Pygame

  * Will serve as base for practicing writing unit test cases

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * First, let's try playing around with it

  * You need to have `pygame` installed

  * Download link:{include:game.zip.datauri}["game.zip",filename="game.zip"]

  * Extract and run the program
+
------
$ unzip game.zip
$ cd game
$ python -m sokoban.main
------
+
  * Arrow keys to move, `S` to skip to next level, `BACKSPACE` to
    undo, `R` to reset

=== Unit Testing Frameworks

  * Unit testing frameworks provide then necessary infrastructure to

    - Write test cases
    - Run the test cases
    - Generate test reports

  * Available unit testing frameworks

    - `unittest`, part of standard library
    - `py.test`, popular third party framework
    - `nose2`, extends `unittest`, making nicer and easier

[role="two-column"]
=== Sokoban Levels

[role="left"]
[source,python]
------
include::code/test_model_v1.py[]
------

[role="right"]
  * A level is represented as a list of strings.
  * Corresponding graphical representation
+
image::figures/sokoban-level-example.png[]
+
  * The `World` class parses the given level, and sets
    up its attributes

=== Try Out

  * Go to the top level folder (the one that contains the `README` file)

  * Create `test_model.py`, with the code from previous slide

  * Execute and verify the output

=== Writing a Test Case

[source,python]
------
include::code/test_model_v2.py[]
------

=== Try Out

  * Update `test_model.py` with the code from the previous slide

  * Invoke `python -m unittest discover`
    - Discovers all files starting with `test_`
    - Looks for classes derived from `unittest.TestCase`
    - Executes the tests in the class
    - Records and prints the results

  * Change the assertion of `ncols` to `self.assertEqual(world.ncols,
    8)` causing it to fail, and observe the output of `python -m
    unittest discover`

=== One Logical Concept Per Test

  * Tests to verify the other attributes.
+
[source,python]
------
include::code/test_model_v3/tests.py[]
------
+
  * Each test only verifies one logical concept

  * Test functions are named verbosely to indicate what is being tested

=== Increasing Coverage

  * Tests to verify dimensions is correctly reported in a
    non-rectangular world

  * Tests to verify positions are correctly reported when there are
    multiple docks and boxes

  * Add a level variant, with non-rectangular border and multiple
    docks and boxes
+
[source,python]
------
include::code/test_model_v4/level.py[]
------

=== Increasing Coverage (Contd.)

[source,python]
------
include::code/test_model_v4/tests.py[]
------

=== Assert Raises Exception

  * A `LevelInvalidError` is thrown
    - When an invalid character is present
    - Or when the worker is missing
    - Or when the number of boxes and docks do not match
    - Or when the no. of boxes is zero

=== Assert Raises Exception (Contd.)

  * `assertRaises` can be used to verify that an exception was raised
+
------
assertRaises(exception, func, *args)
------
+
  * Verify that `LevelInvalidError` is raised when an invalid
    character is present
+
[source,python]
------
include::code/test_model_v5/test1.py[]
------

=== Assert Raises with Regex Match

  * `assertRaisesRegexp` in addition can verify that string
    representation of raised exception matches a regex
+
------
assertRaisesRegexp(exception, regex, func, *args)
------
+
  * Test case modified to use `assertRaisesRegexp()`
+
[source,python]
------
include::code/test_model_v5/test2.py[]
------

=== Assert Raises with Regex Match (Contd.)

  * Verify that `LevelInvalidError` is raised when no worker is
    present
+
[source,python]
------
include::code/test_model_v5/test3.py[]
------


=== Try Out

  * Try adding a test case to verify that an exception is raised, when
    there is mismatch in the no. of boxes and docks

== Short Detour: Game Objects

=== Overview

  * Model
    - GameState
    - World

  * Controller
    - GameEngine
    - GameController

  * View
    - GameView
    - PyGameGL

=== World Object

  * `get(pos)`
    - Query tile at the specified `(x, y)` position
    - Returns one of `Tile.WALL`, `Tile.FLOOR`, `Tile.DOCK`,
      `Tile.BOX`, `Tile.WORKER`, `Tile.BOX_DOCKED`
    
  * `move_worker(to_pos)`
    - Move worker to the specified position
    
  * `push_box(from_pos, to_pos)`
    - Move a box from one position to another

[role="two-column"]
=== GameState Object

[role="left"]
image::figures/game-state.png[align="center"]

[role="right"]
  * The current state in a level is represented by `GameState`

  * `GameState` has two attributes
    - `world`
    - `history`

  * `world` is a `World` object that represents the position of the
    tiles

  * `history` is a stack that stores previous `world` states

[role="two-column"]
=== GameState Object

[role="left"]
image::figures/game-state.png[align="center"]

[role="right"]
  * When user moves the worker, a 'copy' of `world` is stored in
    `history` and `world` is modified

  * The `history` stack is used for getting previous `World` objects,
    for implementing undos and reset

=== GameEngine Object

  * Implements user actions within a level like, move, undo and reset

  * `move(dir, state)`

    - Validates and moves the worker in the specified direction, by
      updating the `World` object

    - Validates and pushes the box, if present

  * `undo(state)`

    - Pops previous `World` state from history and sets as current
      state

  * `reset(state)`

    - Pops all previous `World` states from history and goes to the
      initial state


== Mocking

=== What is Mocking?

  * Unit testing requirements:

    - A unit needs to be tested, in isolation from the rest of the
      units
  
    - Units being tested should not access external resources like
      network, filesystem, databases.
      
  * Mocking provides one way of satisfying these requirements

  * A Mock objects can be used to *simulate real objects*

  * In a unit test, Mock objects are deliberately used in place of
    real objects

=== Simulating Objects

  * Simulating an object with attributes
+
[source,python]
------
>>> from mock import Mock
>>> m = Mock(a=1, b=2)
>>> m.a
1
>>> m.b
2
>>> m.b = 3
>>> m.b
3
------

=== Simulating Functions

  * Simulating a function like object, returing a fixed value
+
[source,python]
-------
>>> mfunc = Mock(return_value=10)
>>> mfunc()
10
>>> mfunc()
10
-------

=== Simulating Functions (Contd.)

  * Simulating a function like object, returning a series of values
+
[source,python]
-------
>>> mfunc = Mock(side_effect=["a", "b", "c"])
>>> mfunc()
'a'
>>> mfunc()
'b'
>>> mfunc()
'c'
>>> mfunc()
...
StopIteration
-------

=== Simulating Functions (Contd.)

  * Simulating a function like object, raising an exception
+
[source,python]
------
>>> mfunc = Mock(side_effect=ValueError("test error"))
>>> mfunc()
...
ValueError: test error
------

=== On the Fly, Attributes

  * Object attribute assignment, creates attributes on the fly
+
[source,python]
------
>>> m = Mock()
>>> m.a = 10
>>> print(m.a)
10
------

=== On the Fly, Object Hierarchy

  * Object attribute access, auto-creates Mock objects
+
[source,python]
------
>>> m = Mock()
>>> m.b
<Mock ...>
>>> m = Mock()
>>> m.b.c = 30
>>> m.b
<Mock ...>
>>> m.b.c
30
------
+
  * Hierarchy of objects and attributes can be easily created

=== On the Fly, Functions

  * Turn any Mock object into a function like object by setting
    `return_value` attribute
+
[source,python]
------
>>> m = Mock()
>>> m.func.return_value = 20
>>> m.func()
20
------

=== Call Tracking

  * All calls made on Mock objects are captured and stored
+
[source,python]
------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.call_args_list
[calls(1, 2), calls(2, 3)]
------

=== Asserting on Calls

  * Helper methods to assert calls were made on the Mock object

  * `assert_called_once_with()`, checks if *only one call* was made
    with given arguments
+
[source,python]
------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc.assert_called_once_with(1, 2)
>>> mfunc(2, 3)
>>> mfunc.assert_called_once_with(1, 2)
...
AssertionError
-------

=== Asserting on Calls (Contd.)

  * `assert_called_with()`, checks if the *last call* was made with
    given arguments
+
[source,python]
-------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.assert_called_with(2, 3)
>>> mfunc.assert_called_with(1, 2)
...
AssertionError
-------

=== Asserting on Calls (Contd.)

  * `assert_any_call()`, checks if one of the calls was made with
    given arguments
+
[source,python]
------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.assert_any_call(1, 2)
>>> mfunc.assert_any_call(2, 3)
------

=== Asserting on Calls (Contd.)

  * `assert_has_calls()`, checks if a list of calls were made
  * A call is specified using a `call()` object

[source,python]
------
>>> from mock import call
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc(4, 5)
>>> mfunc.assert_has_calls([call(1, 2), call(2, 3)])
>>> mfunc.assert_has_calls([call(2, 3), call(1, 2)])
...
AssertionError
>>> mfunc.assert_has_calls([call(2, 3), call(1, 2)], any_order=True)
------

[role="two-column"]
=== Testing GameEngine

[role="left"]
image::figures/game-engine.png[align="center"]

[role="right"]
  * `GameEngine` manipulates the `GameState` object

  * Testing the `GameEngine` requires that we isolate it from
    `GameState`

  * `GameState` is simulated using a Mock object

  * Assertions on the Mock object will be used to verify the
    functionality of the `GameEngine`

[role="two-column"]
=== First Test Case

[role="left"]
image::figures/game-engine-test-1.png[width="50%",align="center"]

[role="right"]
  * *Arrange*
    - Worker is in position `(1, 1)`
    - Two tiles to the right are floors

  * *Act*, User moves worker to the right

  * *Assert*, Worker should be moved to `(2, 1)`

=== Test Case Implementation

[source,python]
------
include::code/test_controller_v1/test.py[]
------

[role="two-column"]
=== Try Out

[role="left"]
image::figures/game-engine-test-2.png[width="50%",align="center"]

[role="right"]
  * Write a test case to verify that the worker cannot move into
    a wall

  * *Arrange*
    - Worker is in position `(1, 1)`
    - Two tiles to the right are walls

  * *Act*, User moves worker to the right

  * *Assert*, Worker should not be moved

== Patching

== Faking

== Managing Test Cases

== Resources

== Questions