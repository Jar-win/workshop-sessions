= Unit Testing with Python
Zilogic Systems

== Introduction

=== Why write Test Cases?

  * Python's expressiveness and dynamic nature makes it very
    powerful

  * Some times it just too powerful, and wielding it needs care

  * Can you spot the issue in the following code?

[source,python]
------
class ProtocolX:
    def __init__(self, server, username, password):
        self.server = server
	self.username = username
        self.passwd = password

    def reconnect(self, server):
        self._disconnect()
        self.sevrer = server
        self._connect()
------

=== More Examples

  * Such issues are hard to debug, hours are wasted chasing such bugs

  * Typos can lurk within code paths that are seldom taken

  * Causing programs to crash, when they shouldn't

[source,python]
------
def read_file(filename):
    try:
        fp = open(filename)
	data = fp.read()
    except IOError as exc:
        log.err("error reading '%s': %s" % (filenme, exc))
    finally:
        fp.close()
------

=== Too Powerful!

  * Python lacks the safety net of a compiler and static type checking

  * Remember what Uncle Ben said to Peter Parker?
+
[quote,Uncle Ben]
______
With great *powers*, comes great *responsibility*.
______
+

  * Responsible Python programmers, write automated test cases for their
    code

  * Driving the code through all possible code paths, weeding out
    silly typos and regressions

=== E2E vs Unit Testing

  * People generally tend to test their software as a whole
    - Run the program
    - Input data through the UI
    - Check program's response

  * Tests done this way automated or manual is called End-to-End
    Testing

  * E2E Testing is required but not sufficient

=== Drawbacks of E2E Testing

  * It is terribly *slow*
  
    - Accessing database, networks, files, etc. is slow
    - Implication: Will not be run often
    
  * Running test cases has *dependencies*

    - Depends on the availability of test server, input emulators, etc.
    - Implication: Only people with access to resources can execute it

  * Hard to determine *root cause* of failing test

    - Implication: For a large code base, takes time and effort to zero in on the faulty code

=== Drawback of E2E Testing (Contd.)

  * Cannot drive program through all possible code path, *low code coverage*

    - Some error scenarios is almost impossible to create
    - Implication: Low code coverage, and typos lurking in untested code paths

  * E2E tests can be *flaky*

    - Intermittent network failures, power outages, device failures,
      can cause tests to fail
    
    - Implication: Reduces trust on the tests

=== Unit Testing

  * Unit Tests, verify the public interface of a module / class, in
    isolation

  * Dependencies are *mocked* or *faked*

  * Written and executed by developers

=== Advantages of Unit Testing

  * Unit tests are extremely *fast*
    - They do not use databases, network, file system, other applications, console, etc.

  * Unit tests provide *early feedback*
    - No test setup or resources are required to run the tests
    - Developers can run them every time they make a change and before committing the code

=== Advantages of Unit Testing (Contd.)

  * Unit tests makes it easier to *refactor*
    - Any regression due to refactoring, will be caught by unit tests
    - Code can be refactored / improved without the fear of regression


[role="two-column"]
=== Testing Pyramid

[role="left"]
image::figures/test-pyramid.png[align="center"]

[role="right"]

  * Unit tests verify the *functionality of each unit*

  * Integration tests verify that the *units work together* at the
    sub-system level

  * E2E tests verify that the *product works as a whole*

  * A good test strategy will have, a mix of each approach, with most
    of the testing done at the unit level

[role="tip"]
=== //

Article on Google Testing Blog:
http://googletesting.blogspot.in/2015/04/just-say-no-to-more-end-to-end-tests.html[Just
Say No to More End-to-End Tests]

== Writing Unit Tests

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * A puzzle game, where the player pushes boxes to docks
  * Restrictions
    - Boxes cannot be pulled
    - Boxes cannot be pushed into walls or other boxes

  * Under 400 lines of code, written using Pygame

  * Will serve as base for practicing writing unit test cases

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * First, let's try playing around with it

  * You need to have `pygame` installed

  * Download link:{include:game.zip.datauri}["game.zip",filename="game.zip"]

  * Extract and run the program
+
------
$ unzip game.zip
$ cd game
$ python -m sokoban.main
------
+
  * Arrow keys to move, `S` to skip to next level, `BACKSPACE` to
    undo, `R` to reset

=== Unit Testing Frameworks

  * Unit testing frameworks provide then necessary infrastructure to

    - Write test cases
    - Run the test cases
    - Generate test reports

  * Available unit testing frameworks

    - `unittest`, part of standard library
    - `py.test`, popular third party framework
    - `nose2`, extends `unittest`, making nicer and easier

[role="two-column"]
=== Sokoban Levels

[role="left"]
[source,python]
------
include::code/test_sokoban_v1.py[]
------

[role="right"]
  * A level is represented as a list of strings.
  * Corresponding graphical representation
+
image::figures/sokoban-level-example.png[]
+
  * The `World` class parses the given level, and sets
    up its attributes

=== Try Out

  * Go to the top level folder (the one that contains the `README` file)

  * Create `test_sokoban.py`, with the code from previous slide

  * Execute and verify the output

=== Writing a Test Case

[source,python]
------
include::code/test_sokoban_v2.py[]
------

=== Try Out

  * Update `test_sokoban.py` with the code from the previous slide

  * Invoke `python -m unittest discover`
    - Discovers all files starting with `test_`
    - Looks for classes derived from `unittest.TestCase`
    - Executes the tests in the class
    - Records and prints the results

  * Change the assertion of `ncols` to `self.assertEqual(world.ncols,
    8)` causing it to fail, and observe the output of `python -m
    unittest discover`

=== Unit Tests Improved

  * Tests to verify the other attributes are added in
    link:{include:code/test_sokoban_v3.py.datauri}["version 3 of
    test_sokoban.py",filename="test_sokoban.py"]

  * Each test only verifies on behaviour

  * Test functions are named verbosely to indicate what is being tested

=== Unit Tests Improved (Contd.)

  * link:{include:code/test_sokoban_v4.py.datauri}["Version 4 of
    test_sokoban.py",filename="test_sokoban.py"] adds the following
    tests

    - Tests to verify dimensions is correctly reported in a
      non-rectangular world

    - Tests to verify positions are correctly reported when there are
      multiple docks and boxes

=== Assert Raises Exception

  * A `LevelInvalidError` is thrown
    - When an invalid character is present
    - Or when the worker is missing
    - Or when the number of boxes and docks do not match
    - Or when the no. of boxes is zero

=== Assert Raises Exception (Contd.)

  * `assertRaises` can be used to verify that an exception was raised
+
------
assertRaises(exception, func, *args)
------
+
 
  * `assertRaises` calls `func` is called with `args`, and verifies
    that `exception` was raised

  * Example:
+
------
self.assertRaises(LevelInvalidError, World, level)
------

=== Assert Raises Exception (Contd.)

  * `assertRaisesRegexp` in addition can verify that string
    representation of raised exception matches a regex
+
------
assertRaisesRegexp(exception, regex, func, *args)
------

  * link:{include:code/test_sokoban_v5.py.datauri}["Version 5 of
    test_sokoban.py",filename="test_sokoban.py"] adds test cases to
    verify the exceptions

=== Try Out

  * Try adding a test case to verify that an exception is raised, when
    there is mismatch in the no. of boxes and docks

=== Quering Tile at Position

  * The `World` object has a `get()` method, to query the current tile
    at a give (x, y) position

  * `get()` method returns one of
    - `Tile.WALL`
    - `Tile.FLOOR`
    - `Tile.DOCK`
    - `Tile.BOX`
    - `Tile.WORKER`
    - `Tile.BOX_DOCKED`

[role="two-column"]
=== Tracking Game State

[role="left"]
image::figures/game-state.png[align="center"]

[role="right"]
  * The current state of the game is represented by `sokoban.model.GameState`

  * `GameState` has two attributes
    - `world`
    - `moves`

  * `world` is a `World` object that represents the position of the
    tiles

  * `moves` is a stack that stores previous `world` states

[role="two-column"]
=== Tracking Game State

[role="left"]
image::figures/game-state.png[align="center"]

[role="right"]
  * When user moves the worker, a 'copy' of `world` is stored in
    `moves` and `world` is modified

  * The `moves` stack is used for getting previous `World` objects,
    for implementing undos and reset

== Mocking



== Patching

== Faking

== Managing Test Cases

== Resources

== Questions